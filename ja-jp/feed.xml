<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jmtsuji.github.io/ja-jp/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jmtsuji.github.io/ja-jp/" rel="alternate" type="text/html"/><updated>2024-03-12T16:25:07+00:00</updated><id>https://jmtsuji.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Processing HPLC data using JupyterLab</title><link href="https://jmtsuji.github.io/ja-jp/blog/2024/hplc-data-analysis/" rel="alternate" type="text/html" title="Processing HPLC data using JupyterLab"/><published>2024-03-06T17:00:00+00:00</published><updated>2024-03-06T17:00:00+00:00</updated><id>https://jmtsuji.github.io/blog/2024/hplc-data-analysis</id><content type="html" xml:base="https://jmtsuji.github.io/blog/2024/hplc-data-analysis/"><![CDATA[<p style="color:grey">[ 申し訳ありませんが、このページはまだ日本語に翻訳されていません。とりあえず、英語ページの内容を以下に貼り付けておきます｡ ]</p> <p>When analyzing HPLC data or GC data, one often ends up using the commercial software that came with the device to find peaks and plot signals. In my case, I was working with an older instrument and wanted to try to find a solution in Python. I came up with the following rough code, shown in an iPython notebook - this code is included in <a href="https://github.com/jmtsuji/Ca-Chlorohelix-allophototropha-RCI/blob/master/analysis_code/physiology/hplc/Fig1bc.ipynb"> the GitHub repo for a pre-print we uploaded to bioRxiv last year</a>. Basically, Scikit-learn is used to find peaks in the data, and everything is visualized using plotnine. I haven’t tried to calculate peak areas yet.</p> <p>The code below is rough and would need to be cleaned up before it was ready for general use, but I wonder such code might come in handy for future chromatograph work. See the two plots at the end of the notebook to get a sense of what the code can do.</p> <p>I apologize for the dearth of comments (!) and the plotnine warnings, but basically, the analysis below does the following:</p> <ol> <li>Defines functions for working with hyper-spectral HPLC signal data - in my case, these data are absorbances at a range of wavelengths across a range of retention times</li> <li>Uses a “master function” to extract out HPLC traces and identify peaks at a specific absorbance wavelength of interest, for three HPLC samples. The absorbance spectra (across the full wavelength range) are plotted for each identified peak</li> <li>Merges the results from the three samples to generate two figures: <ul> <li>HPLC profiles (over time) for three samples at the same wavelength</li> <li>Absorbance spectra of the highest peaks in the HPLC profile figure, for each sample</li> </ul> </li> </ol> <p>Note: some of the code lines might get cut off in the inserted notebook below, so if you’d like to freely explore the full notebook file, see <a href="https://github.com/jmtsuji/Ca-Chlorohelix-allophototropha-RCI/blob/master/analysis_code/physiology/hplc/Fig1bc.ipynb"> the notebook on GitHub</a>. You can also check out its brief associated <a href="https://github.com/jmtsuji/Ca-Chlorohelix-allophototropha-RCI/tree/master/analysis_code/physiology"> README</a>.</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/hplc.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p><br/></p> <p>Interesting that this is possible in pure Python! I might clean up this code more someday in future.</p>]]></content><author><name></name></author><category term="coding"/><summary type="html"><![CDATA[My experiences using iPython notebooks to process chromatograph signal data]]></summary></entry></feed>